{
	"info": {
		"_postman_id": "073e557f-32a9-424b-9fd1-aad9ef0b7399",
		"name": "LMS_APITesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "UserLoginModule",
			"item": [
				{
					"name": "Invalid  Email Id Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Invalid Email Id\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bd25ba38-b30b-47aa-b236-1eeb2e43f026"
							}
						}
					],
					"id": "40ca4c69-5b59-4130-883f-a54a847b5baa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{Invalidpassword}}\",\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "Invalid Password Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Invalid Password\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "58db1856-d302-495e-af9d-6b72551be77c"
							}
						}
					],
					"id": "651a5199-eda1-4a5e-9153-c02e0b2c3407",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmailId\": \"{{InvaliduserLoginEmailId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "InvalidEmail and InvalidPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Invalid Email Id and Invalid Password\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f4475298-dfb1-4db3-9804-7853c25b4e6a"
							}
						}
					],
					"id": "76a81d66-57ea-45c3-9799-2e2f1a338ac8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{Invalidpassword}}\",\r\n  \"userLoginEmailId\": \"{{InvaliduserLoginEmailId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "Blank Email Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 400 :Bad request : Email is mandatory\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"id": "8e7e720a-53ce-4fc4-a7bc-407816ca2b58"
							}
						}
					],
					"id": "9212f430-2ff0-41ba-9c1a-e2d44b08edd1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "Blank password Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 400 :Bad request : password is mandatory\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"id": "209dd60b-60dd-4309-af1f-a588e70e4631"
							}
						}
					],
					"id": "a6db03f4-77f3-4edb-8b52-942d3885e88e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmailId\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "Blank Email and Blank  password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 400 :Bad request : Email and password are mandatory\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"id": "87f1da07-b112-42a8-b01e-c22f412f9739"
							}
						}
					],
					"id": "2c39cffc-2985-4d1e-b697-ca0e42baf538",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmailId\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "User SignIn to LMS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Active\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody)\r",
									"pm.collectionVariables.set(\"BearerToken\", jsonData.token);\r",
									"\r",
									"//set Response Schema variable \r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": { \"type\": \"string\" },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"status\": { \"type\": \"string\" },\r",
									"    \"token\": { \"type\": \"string\" },\r",
									"    \"type\": { \"type\": \"string\" },\r",
									"    \"userId\": { \"type\": \"string\" }\r",
									"  },\r",
									"  \"required\": [\"email\", \"roles\", \"status\", \"token\", \"type\", \"userId\"]\r",
									"};\r",
									"     \r",
									"    \r",
									"  \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "01bb9a0c-e6b6-482f-843a-0b1e633e0bbc"
							}
						}
					],
					"id": "1a2ada06-ad42-43be-8832-2867645da05a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"password\": \"{{passwordExcel}}\",\r\n  \"userLoginEmailId\": \"{{userLoginEmailIdExcel}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				}
			],
			"id": "1ff4a3e9-db54-4625-9fcd-53ffe3d635f5"
		},
		{
			"name": "ProgramModule",
			"item": [
				{
					"name": "Create New Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);",
									"",
									"",
									"var jsonResponse = pm.response.json();",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": { \"type\": \"integer\" },",
									"    \"programName\": { \"type\": \"string\" },",
									"    \"programDescription\": { \"type\": \"string\" },",
									"    \"programStatus\": { \"type\": \"string\" },",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }",
									"  },",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"};",
									"",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "4f020926-e19f-4861-8089-c7a7909ab609"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(100,175)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "452bc673-e1c5-446a-8ee3-a90f2b223f07"
							}
						}
					],
					"id": "b732dbb6-b801-4087-b1ba-1bcf56bc5506",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription_TestFile}}\",\n  \"programName\": \"{{createprogramName}}{{serialNumber}}\",\n  \"programStatus\": \"{{createprogramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Program for existing program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7412cde9-7443-4775-9aed-d70eeeae688b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "62e7d178-ceca-4ceb-9187-277c8f5c3e15"
							}
						}
					],
					"id": "7d22a761-1ae9-4bc9-85d3-11440a47ae53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Program with Invalid Program Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not a Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"    });",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript",
								"id": "a7744b7c-0f99-49c5-b3d5-8aa0c06b7f27"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(0,5)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "a8de0e12-9886-4e88-a98a-755e5514d87b"
							}
						}
					],
					"id": "71d269cb-2d8b-4483-8e63-1d9905e4e4bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescriptionNegative}}\",\n  \"programName\": \"{{programName}}{{serialNumber}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program with Invalid Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not a Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								],
								"type": "text/javascript",
								"id": "26ba696a-294b-4568-ab32-1d383a19bded"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(0,5)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "70ea7217-4460-4cf4-8069-8dcd13745c82"
							}
						}
					],
					"id": "168a6bb0-501b-495d-8dcc-207b9c15079e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programNameNegative}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Proagram with Invalid Program Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not a Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								],
								"type": "text/javascript",
								"id": "93ce600e-493c-4b67-a93d-c9ac4e393d59"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(0,5)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "a0cca11e-cd50-4cb1-837a-52ad86bd1d34"
							}
						}
					],
					"id": "e57efd4d-17bf-4eda-b993-4863d302e115",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}{{serialNumber}}\",\n  \"programStatus\": \"{{programStatusNegative}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"id": "a6fa0173-2190-4faf-9de7-05074da68fa1"
							}
						}
					],
					"id": "df8a70d6-45fe-41ed-99c5-d7e88e03dbff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Program By ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "7276ef57-5ac8-44a0-899f-b9dee2503def"
							}
						}
					],
					"id": "1da08cda-e990-46b2-a5c3-ef9b65df1dbc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/programs/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Program By non-exsting ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"id": "58914e91-aa79-4fec-bcba-1f65a1a58185"
							}
						}
					],
					"id": "828b14e0-df00-4c4c-9398-c6d0bbfbc3bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/programs/{{NonExistProgramId}}"
					},
					"response": []
				},
				{
					"name": "All Program with Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "7c10a9fe-ac63-4afd-9848-d44e3e8ed620"
							}
						}
					],
					"id": "156d09ef-8beb-49ad-8d65-b1347c69b97f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Update Program By Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									" //pm.environment.set(\"programId\", jsonData.programId);\r",
									" pm.collectionVariables.set(\"programName\",jsonData.programName);\r",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);\r",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);\r",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": { \"type\": \"integer\" },\r",
									"    \"programName\": { \"type\": \"string\" },\r",
									"    \"programDescription\": { \"type\": \"string\" },\r",
									"    \"programStatus\": { \"type\": \"string\" },\r",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "66f0f5da-ff80-4309-9e14-46286e38cb5a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const serialNumber = _.random(400,1000)\r",
									"// pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "560faa8b-8d69-446b-ac29-d10799c276f9"
							}
						}
					],
					"id": "40d7ba1c-3ba1-4b6d-877f-822248eef065",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/putprogram/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ID with Empty Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"id": "141b3391-96e3-4145-b92c-f85088df9267"
							}
						}
					],
					"id": "167c45ba-f383-46ab-9290-3dbdc61d813d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{IDEmptyprogramName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/putprogram/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ID  for non-existing program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									" \r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript",
								"id": "8955c0df-35d4-49eb-a572-b745e8231801"
							}
						}
					],
					"id": "5e7f0f11-7c7f-4640-ac21-8554f79b0c91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/putprogram/{{NonExistProgramId}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ID With Empty Program Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ad42f5d1-c44b-48f0-805a-86e5d6e27ed7"
							}
						}
					],
					"id": "eea91d30-dc80-4f82-9d79-a62d9375d941",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{IDEmptyprogramStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/putprogram/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Update Program description By Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);\r",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);\r",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);\r",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);\r",
									"\r",
									"//pm.test(\"verify program name \",function()\r",
									"//{\r",
									"// const response=pm.response.json();\r",
									"// pm.expect(response.json.programName).to.eql(pm.iterationData.get(\"programName\"));\r",
									"\r",
									"// });"
								],
								"type": "text/javascript",
								"id": "c70f21db-2cc8-465c-911a-8b0613fdea95"
							}
						}
					],
					"id": "22f16557-0fe2-4359-a5df-9080aa253e90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\": \"{{NameprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/program/{{programName}}"
					},
					"response": []
				},
				{
					"name": "Update Program By Name  for non-existing program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									" \r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript",
								"id": "3f731110-c7a6-4ec6-986c-8d55bd5dc17e"
							}
						}
					],
					"id": "4134fa3e-074d-4d60-a13e-ad378f1b0d7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{NameprogramDescription}}\",\r\n\"programName\": \"{{NonExistProgramName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/putprogram/{{NonExistProgramName}}"
					},
					"response": []
				},
				{
					"name": "Update Program By Name with Empty Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"id": "526ebfb9-a8c8-46e6-8707-0c3463ac6c46"
							}
						}
					],
					"id": "c20c5d97-bcf3-433a-8847-54fdb707a8bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\": \"{{programDescription}}\",\r\n\"programName\": \"{{IDEmptyprogramName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/program/{{programName}}"
					},
					"response": []
				},
				{
					"name": "Update Program By Name With Empty Pogram Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8a46a26f-2450-4d70-a0fc-f760df6949c7"
							}
						}
					],
					"id": "a19eb9a2-38af-43e7-8687-dcb0ec520834",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{programDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{IDEmptyprogramStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/program/{{programName}}"
					},
					"response": []
				},
				{
					"name": "Delete Program With Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"   \r",
									"\r",
									"});\r",
									"const response=pm.response.text();    \r",
									"pm.test(\"Program deleted successfully\",()=>{\r",
									"    pm.expect(response).to.eql(\"Message: Program Id-\"+pm.collectionVariables.get(\"programId\")+\" is deleted Successfully!\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7f3d9bdd-8d83-4f98-bb54-df657fdd128d"
							}
						}
					],
					"id": "aabcbd7f-4634-4b4e-9147-3484bfab8692",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program With inactive Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"\r",
									"});\r",
									"const response=pm.response.text();    \r",
									""
								],
								"type": "text/javascript",
								"id": "68aa991c-f96a-4776-8d84-64085cd76167"
							}
						}
					],
					"id": "d3ac19ce-cf46-4b8e-96bf-8d20b74450fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Create New Second Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);",
									"pm.collectionVariables.set(\"InActiveProgramId\", jsonData.programId);",
									"",
									"var jsonResponse = pm.response.json();",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": { \"type\": \"integer\" },",
									"    \"programName\": { \"type\": \"string\" },",
									"    \"programDescription\": { \"type\": \"string\" },",
									"    \"programStatus\": { \"type\": \"string\" },",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }",
									"  },",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"};",
									"",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "27d284fa-8461-43fc-9795-9f9b3970a947"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(150,200)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "e25dd2e4-127f-4bba-a861-b1a150908b61"
							}
						}
					],
					"id": "a71509dd-fc21-45d8-b98b-39ebe0e33268",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription_TestFile}}\",\n  \"programName\": \"{{createprogramName}}{{serialNumber}}\",\n  \"programStatus\": \"{{createprogramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Delete Program With  Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"\r",
									"});\r",
									"const response=pm.response.text();    \r",
									"pm.test(\"Program deleted successfully\",()=>{\r",
									"    pm.expect(response).to.eql(\"Message: Program Name -\"+pm.collectionVariables.get(\"programName\")+\" is deleted Successfully!\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6647f9c1-0cde-475b-8033-e06142fd3bf9"
							}
						}
					],
					"id": "c3e24652-4222-4859-a3af-dd986cdacd06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/deletebyprogname/{{programName}}"
					},
					"response": []
				},
				{
					"name": "Create New Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);",
									"",
									"var jsonResponse = pm.response.json();",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": { \"type\": \"integer\" },",
									"    \"programName\": { \"type\": \"string\" },",
									"    \"programDescription\": { \"type\": \"string\" },",
									"    \"programStatus\": { \"type\": \"string\" },",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }",
									"  },",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"};",
									"",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b4052b1b-b9b7-44b5-8616-9a712cbd6a29"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(100,175)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "8d4ea5d6-2b50-4343-87b0-91d13ec2f4c4"
							}
						}
					],
					"id": "2a7b11d6-ba3e-4094-9156-3170d7784912",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription_TestFile}}\",\n  \"programName\": \"{{createprogramName}}{{serialNumber}}\",\n  \"programStatus\": \"{{createprogramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Program By ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "53fbbc14-542b-43d0-817d-0b189180724f"
							}
						}
					],
					"id": "67df9201-a433-4c0a-bd77-c00577a71435",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/programs/{{programId}}"
					},
					"response": []
				}
			],
			"id": "8bb14f53-4296-46b8-9fdb-5f4cbcb38ddf"
		},
		{
			"name": "ProgramBatchModule",
			"item": [
				{
					"name": "Create a new Batch for the Program",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(20,25)\r",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "a81a3959-9689-45de-b92e-2f8be1e091f3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"      pm.response.to.have.status(201);\r",
									"});\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									" \r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									" pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									" pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									" pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									"pm.collectionVariables.set(\"InactiveBatchId\", jsonData.batchId);\r",
									"pm.collectionVariables.set(\"InActiveBatchName\", jsonData.batchName);"
								],
								"type": "text/javascript",
								"id": "05c7585c-8dc0-43b7-8198-de6e004ee9d0"
							}
						}
					],
					"id": "981d330a-f1eb-4d22-9b19-a7fbe703c83f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescriptionExcel}}\",\r\n  \"batchName\": \"{{batchNameExcel}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClassesExcel}},\r\n  \"batchStatus\": \"{{batchStatusExcel}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "Create a new Batch with existing Program and  batchName-Invalid 400 status code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//const serialNumber = _.random(0,5)\r",
									"//pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript",
								"id": "ded044f7-8e5f-4976-a4dc-3a4a137f90ac"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"   \r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"// pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"//  pm.collectionVariables.set(\"batchName\", jsonData.batchName);\r",
									"//  pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"//  pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"// pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"// pm.collectionVariables.set(\"batchId\", jsonData.batchId);"
								],
								"type": "text/javascript",
								"id": "061d89ed-9348-4792-9f85-cd7e2ec1cdfc"
							}
						}
					],
					"id": "49da3ce9-3b5e-4f23-8e93-5ee98184cad1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing BatchName-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "56416e2f-0a59-4892-919c-b1135ce7e9d2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"    \r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"id": "bce7fe16-9332-410e-98a0-da57fc4f5286"
							}
						}
					],
					"id": "281591d1-5a69-49c2-ad9d-0bd133347b0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing Batch Number Of Classes-invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e526b865-530d-46ac-bc56-4e814a556eeb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "755cc651-4605-4e30-be7d-a7c9695461ea"
							}
						}
					],
					"id": "1056e63a-6f4a-4128-b20e-57fd82899fac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{missingbatchNumber}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with  Batch Number Of Classes  as alphanumeric-invalid Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a721616c-bd99-4d0a-8c94-98adf5a684b6"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "23854080-8452-4e28-979c-c4ca3ac8b44a"
							}
						}
					],
					"id": "640fe581-db2a-475c-93d3-37aaad913a74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": \"10q\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing BatchStatus code-invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9dc4dc4a-931e-49f3-9c10-bc66f23b9da9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9eb9becb-8cbe-4789-ac92-2212d255e2aa"
							}
						}
					],
					"id": "838eb1be-4240-4c11-8880-5b30b13f25d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing ProgramId-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "eaa04953-ff7f-4f34-b154-4d3f9632a276"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "300cf728-3322-45ba-9b4a-97003b33f8d5"
							}
						}
					],
					"id": "6abab0f0-5ab6-4c2f-a84c-f65904fc2337",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with invalid EndPoint-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d913c6b9-8635-4349-b3b9-1bcff4a6e23d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "77df86cb-6ea8-4d7a-b5f8-c342f6df11a7"
							}
						}
					],
					"id": "aa804cd7-db96-477a-9ab7-9e018811e410",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batchesand"
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with Inactive ProgramID-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8bde91e0-4899-4f51-a09b-ea819ec3b4b8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "96ed5352-2e30-4506-ae56-cb0b7e478041"
							}
						}
					],
					"id": "494a69f2-4b54-46a7-9765-05f80f71a7f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{InActiveProgramId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "View All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "ff1b26ca-2042-4bb5-8993-0c32b1a30700"
							}
						}
					],
					"id": "b59ea042-5a97-4f86-b61d-1fc16abbae29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				},
				{
					"name": "View Batch by valid BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e6305656-6b96-44ab-a264-202296006d3f"
							}
						}
					],
					"id": "309e70d6-1c94-45cf-9691-0c22bc2516d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/batchId/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "View Batch by valid  BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8a6c3ca0-ed85-4e67-ad00-1e285ccd4616"
							}
						}
					],
					"id": "c2753a4e-2126-40cf-96a5-3b7ee5f697eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/batchName/{{batchName}}"
					},
					"response": []
				},
				{
					"name": "View Batch by valid  ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a7b409a7-6443-4544-80e4-088434b3b9aa"
							}
						}
					],
					"id": "84abbe36-30f9-47f8-9cd9-331f1e7beaf6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/program/{{programId}}"
					},
					"response": []
				},
				{
					"name": "View Batch by Inactive  Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "17657f35-120d-40f5-8d23-b52960c5dafb"
							}
						}
					],
					"id": "776b22c7-9a86-4c79-8f0b-284da43738bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/program/{{InActiveProgramId}}"
					},
					"response": []
				},
				{
					"name": "View Batch by non-existing BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "83300040-b4d4-466e-abe6-267a8cc4fab7"
							}
						}
					],
					"id": "04e462d9-2b02-4598-92fe-d20127ea60d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/batchId/{{nonExistngBatchId}}"
					},
					"response": []
				},
				{
					"name": "View Batch by non-existing BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2db54dfe-909b-4acc-9c65-6eda34086174"
							}
						}
					],
					"id": "5dd6754a-6b06-4702-b81a-fc85c2778c8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/batchName/{{NonExistngBatchName}}"
					},
					"response": []
				},
				{
					"name": "View Batch by non-existing ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "07b1fcfd-84c3-4c42-ad7c-4ede29b38da0"
							}
						}
					],
					"id": "efd328c1-ec21-4000-a6ce-44cd111e511b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/program/{{NonExistProgramId}}"
					},
					"response": []
				},
				{
					"name": "Update a Batch with Batch descriptions by valid BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript",
								"id": "4167ddb9-8a48-432e-b50c-6ce4d60000ae"
							}
						}
					],
					"id": "24f260af-1efa-480c-8239-2ceca451a995",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update a Batch with Batch Number Of classes  by valid BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript",
								"id": "bc775870-ab35-42e6-a38a-712fc3acbb21"
							}
						}
					],
					"id": "d06b365b-011a-4360-b7ce-22d5b699997d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update a Batch with Batch Name by valid Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript",
								"id": "4c33c96d-530e-41c9-92bc-39088c79ccd3"
							}
						}
					],
					"id": "bd7d4176-e04d-46a9-8d26-3609fa1fb96a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdatebatchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update a Batch with Program name  by BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"//assumption :corresponding program name associated with the programId will be displayed, and will not take any other value.\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript",
								"id": "8b93a0ee-c015-480e-b95d-6ed43bfef2be"
							}
						}
					],
					"id": "2eb500c6-fc2f-4c71-8832-33b06b1dc01c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdateprogramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update a Batch with existing ProgramID by valid BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"id": "26bda4f3-e1db-440b-b9df-6a64ed01fee0"
							}
						}
					],
					"id": "929d7f11-3a13-400a-ace4-976b38a83bb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update the batch by BatchId  with Inactive ProgramId-Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"id": "ce12a608-2f39-449d-bd19-3257b52e7dc1"
							}
						}
					],
					"id": "c51ee0a4-ab6e-4c82-8e6e-52417a4ed9bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{InActiveProgramId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch Status with invalid status value by batchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "44777c25-8baf-4883-b70e-73589d34d174"
							}
						}
					],
					"id": "c7ec2f29-fbe1-4fba-9fea-1d83f1bdbafc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{InvalidBatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch Status  by batchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript",
								"id": "7d681133-d8f7-4e05-9b2a-c70c7ac2a16d"
							}
						}
					],
					"id": "c339a333-0086-4217-bee5-5dae1a3df9c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdatebatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch status and program name with valid batchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "9a5bc08a-4146-4455-a988-2727118127de"
							}
						}
					],
					"id": "561b8b38-8c5c-49c6-981d-c470e0b51dfe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{ActivebatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdateprogramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update batch with non-existing ProgramId -Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"id": "738feb79-8739-462d-8b82-06e0907eee22"
							}
						}
					],
					"id": "e3bee78f-9503-40a3-91dd-e96520a345db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{NonExistProgramId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update BatchId of a batch with the  existing BatchId-Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "fb5d1733-98db-4d0a-9443-c8ba32299827"
							}
						}
					],
					"id": "449e114b-21c4-42d6-b6cf-ed623e573013",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch description by non existing batchId-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"id": "3cfa9d7b-8cdb-43df-bbcf-29b6a4631b13"
							}
						}
					],
					"id": "5b38fb19-df8c-44dd-abed-79c389d69387",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{nonExistngBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{nonExistngBatchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch number of classes  by non existing batchId-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "91abafaa-edaa-4756-b55e-7af440f0e931"
							}
						}
					],
					"id": "ddcd6b2a-92a4-4984-9e9f-e8dfcdd7a4bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{nonExistngBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{nonExistngBatchId}}"
					},
					"response": []
				},
				{
					"name": "Delete  a Batch with valid BATCH ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5f4a070e-4136-4529-8151-236b9878c25a"
							}
						}
					],
					"id": "168dade6-a61e-4534-89cb-876a224b1e84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by non-existing BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c7913294-fcfe-4f9b-bb99-6e01899f2a89"
							}
						}
					],
					"id": "e8b0bbb2-5aa5-4d06-85ab-96e23e48e65d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/batches/{{nonExistngBatchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by inactive BatchID -invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b2dbe92e-ae56-4524-9b94-97715ce834bf"
							}
						}
					],
					"id": "981af64c-4b2b-4a1f-8dbf-0661c8497670",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/batches/{{InactiveBatchId}}"
					},
					"response": []
				},
				{
					"name": "View Batch by Inactive BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b420df97-a66d-4c0c-a035-daccb02c19f6"
							}
						}
					],
					"id": "c1b8db64-8e8e-4b9d-b8ca-ff65358a83ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/batchId/{{InactiveBatchId}}"
					},
					"response": []
				},
				{
					"name": "View Batch by Inactive BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "88d4642c-dd06-493f-939f-9b2a1a59a7ef"
							}
						}
					],
					"id": "92e27c02-c7a1-47d8-9592-4d991fc0c783",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/batchName/{{InActiveBatchName}}"
					},
					"response": []
				},
				{
					"name": "Update Batch descriptions  by inactive batchId -invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "2128f99d-ea93-4c26-bd3e-a0e347cff519"
							}
						}
					],
					"id": "4636a4d3-6023-4f30-894b-5a667b2613da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{InactiveBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{InactiveBatchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch number of classes  by inactive batchId-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"id": "93a3f995-ec4f-447c-888b-708c0fae49d4"
							}
						}
					],
					"id": "c7b01958-0968-44b5-9cbe-bb51330575cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{InactiveBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches/{{InactiveBatchId}}"
					},
					"response": []
				},
				{
					"name": "Delete  a existing Batch to make  Batch status inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "be0dd35a-8363-43f3-9480-9c33bc3071c9"
							}
						}
					],
					"id": "d287cca9-82b2-49bd-a833-24bc4c7279d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Create a new Batch 2 for the given Program",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(30,35)\r",
									"pm.variables.set(\"serialNumber\", serialNumber )\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "bf378b3e-5068-44bf-9d80-fed7c8c7265b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"      pm.response.to.have.status(201);\r",
									"});\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									" pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									" pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									" pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);"
								],
								"type": "text/javascript",
								"id": "79e12f19-b3cd-4af0-9e13-3c24181c4242"
							}
						}
					],
					"id": "e90b3e69-7a41-404a-8b9b-a5023c760c71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescriptionExcel}}\",\r\n  \"batchName\": \"{{batchNameExcel}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClassesExcel}},\r\n  \"batchStatus\": \"{{batchStatusExcel}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/batches"
					},
					"response": []
				}
			],
			"id": "de58eacd-c720-4550-9c66-4be33808643b"
		},
		{
			"name": "UserModule",
			"item": [
				{
					"name": "NoAuthCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "80290c83-4e24-4586-a7f4-d58398a964cf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bce9730a-79cc-4d68-9a22-47705bddd881"
							}
						}
					],
					"id": "0ed8facf-c21a-4c2b-9c8b-1842fc188872",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\n    \"userComments\": \"{{AdminComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{adminfirstname}}\",\n    \"userId\": \"\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userLogin\": {\n        \"loginStatus\": \"{{loginStatus}}\",\n        \"password\": \"{{password}}\",\n        \"roleIds\": [\n        \"Admin\"\n        ],\n        \"status\": \"{{status}}\",\n        \"userLoginEmail\": \"{{email}}\"\n    },\n    \"userMiddleName\": \"{{userMiddleName}}\",\n    \"userPhoneNumber\": {{PhoneNumber}},\n    \"userRoleMaps\": [\n        {\n        \"roleId\": \"{{roleIdAdmin}}\",\n        \"userRoleStatus\": \"{{userStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{timeZone}}\",\n    \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRequestBodyCreatingUserforAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript",
								"id": "7b637820-eb59-4891-81a2-25527c3bea3e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4584a218-da67-4ce5-8343-b9cd52b4e479"
							}
						}
					],
					"id": "2c525dc3-a6ca-4da8-999b-351746f956ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFirstnameCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c0a8e5f0-2148-46e3-89e8-c24bfd14dc83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "df65bd60-d6bf-4192-a40e-e293ea6b26b1"
							}
						}
					],
					"id": "36a4de57-0527-421a-9567-ac747f788de8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0115e4c2-4fa8-490f-9dfd-1792d09d28fa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "00f708cf-fd20-49b2-8fa3-20391c366faa"
							}
						}
					],
					"id": "3df6582d-c426-4c42-b5cf-418330bda3da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "aa636a34-8a35-4dec-99ea-5da1bfefd02c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a60f2eed-cd76-4eba-9829-ad80c3b5dcaa"
							}
						}
					],
					"id": "767ad059-5a05-426c-b0dd-8926b9052a35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyMailCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});"
								],
								"type": "text/javascript",
								"id": "7f67ba2e-8d80-4104-bbd3-ba0d6125b4e7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript",
								"id": "9f903a80-21f3-4263-ab7f-8604dd2c34cc"
							}
						}
					],
					"id": "def7986a-b355-4035-9282-032f12e5cea0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "1f3f0e19-043e-4a6e-8799-08551e258951"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "40416651-999b-4dd7-b822-c7cfe6b31628"
							}
						}
					],
					"id": "9cc8f232-81c6-47cd-b52a-a1cd7cfad7ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyTimeZoneCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d6e3c945-1e20-4d6e-a096-d8f493823345"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c33c51be-5430-4e99-9da4-89aae6dda9f9"
							}
						}
					],
					"id": "caef2526-42e7-472f-8cee-9970873d370d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyVisaStatusCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8680a3df-7202-4e79-b4aa-d4c9d42b4183"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "bca341f1-ed9d-4ee9-8245-2de1e9cb953b"
							}
						}
					],
					"id": "5854d36c-ef4b-4a74-a24f-1e0f97d97bd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidFirstnameCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"alphabets only\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "59dbd60b-556f-4e41-8581-daed741f7ce7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b56b3c18-4cc8-47bc-8cc4-68477a26b084"
							}
						}
					],
					"id": "83e7626e-2cf9-4a00-a5fb-15a51c563cb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{InvalidFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidLinkedInCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"www.linkedin.com\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "228a6a9c-5220-47ba-96d1-bb25993e2dbb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript",
								"id": "f1aae4a0-7da1-467e-917b-d6f51b6fb8b3"
							}
						}
					],
					"id": "bceeea37-72c1-4a7f-9519-308a0d3bf320",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{InvaliduserLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidPhoneNumberCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"format (CountryCode)(PhoneNo)\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "17e3088f-1b78-485b-9007-31f62117fbad"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript",
								"id": "8892b898-c715-4e1c-b57e-d0a68d0c68f3"
							}
						}
					],
					"id": "ba082457-4a9f-4d3c-b768-f1b05239e127",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{InvalidPhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidMailCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript",
								"id": "85a02c83-8e2f-495b-92c6-3c9290c1421c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var Invalidemail = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\");",
									"pm.collectionVariables.set(\"Invalidemail\", Invalidemail);"
								],
								"type": "text/javascript",
								"id": "a027bdb5-b20d-401d-b653-b675c8fbedc1"
							}
						}
					],
					"id": "fcbd1a03-fc6e-4844-9d36-e7862a0128c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{Invalidemail}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "3006ea2f-f885-431a-8120-8322bea405d8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript",
								"id": "b88c1ccb-b71e-42a9-a9d3-b1bf534bdf33"
							}
						}
					],
					"id": "8ecf3bff-78fa-4e23-98b5-02f155acb0b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{InvalidVisa}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8496544b-9a5b-430e-9d8b-3e3938f010d0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									""
								],
								"type": "text/javascript",
								"id": "df9a04eb-ea08-48cc-b2ac-cbd8dcb74555"
							}
						}
					],
					"id": "8b48f430-5239-43f0-92e4-1bd17249a877",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{invalidroleId}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "CreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user=JSON.parse(responseBody)",
									"pm.collectionVariables.set(\"adminuserId\", user.userId);",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d0189ce5-0309-46f0-8064-3a2279712a99"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b678337a-e929-470b-9ef2-a6d3a6959ad2"
							}
						}
					],
					"id": "90ed20d5-0210-432a-b793-173693925ef8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidExistingPhoneNumberCreatingUserForAdminRole Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "33255cbd-b399-4e6c-ad43-22dc3ff908e5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}+1\")+\"@gmail.com\";",
									"//     pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript",
								"id": "36db4761-994e-449a-84b3-1114c1a7694b"
							}
						}
					],
					"id": "2f306f19-abd3-4a9b-b79d-6b29e5208bae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidExistingMailCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c3ab92f0-ad15-4284-82e9-d457bce5f387"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									""
								],
								"type": "text/javascript",
								"id": "56f965f6-0a18-4ae3-8955-732dd1d656cc"
							}
						}
					],
					"id": "2db81fe9-cbeb-45b7-aa73-266fc091e635",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "CreatingUserForAdminRoleForInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user=JSON.parse(responseBody)",
									"pm.collectionVariables.set(\"userIdforInvalid\", user.userId);",
									"",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "4d23ec1e-b52d-48a6-b063-9117dd427607"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);",
									"",
									" var email = \"admin1\" + pm.variables.replaceIn(\"{{$timestamp}}+1\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "1079692e-1eeb-4303-aa2a-c66d35c6b02d"
							}
						}
					],
					"id": "43883955-8fd4-47fd-a509-70e3225e8c01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "NoAuthCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript",
								"id": "e93cbd98-2f3e-4e91-8653-b0e65575bba6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "392686ba-fdaf-4a09-b839-71e1f938a7d1"
							}
						}
					],
					"id": "a4d4fb9f-9c09-41ef-8997-7ab4cd8a61fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRequestBodyCreatingUserforStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0ed73470-0be7-4c22-acbf-0517c4279506"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8a435f01-6d94-4a69-86bb-c36bca97b951"
							}
						}
					],
					"id": "8844e20c-431a-45bf-9fdf-a11008782f61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFirstnameCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "030642c0-7904-45f0-8957-f6b918b88754"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5264125a-4239-4bdf-9d14-66113ee49b96"
							}
						}
					],
					"id": "af7d56ac-b9c9-4bb5-b664-6a9012f7f5e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7f8026e8-233b-44d2-81b8-91ece15649f2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "dd919ac3-4de0-47b8-bb7a-455091a45502"
							}
						}
					],
					"id": "38e7c670-b1b0-457e-a47d-f40d6fd878e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ef3cb072-1e13-43f9-8bba-517b67d90008"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6eb78ac6-3545-413f-96a7-0332d59c713a"
							}
						}
					],
					"id": "7b372b06-2778-43b3-92bf-8bcbace8fd0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyEmailCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "416d5941-ea1d-4547-a7a3-fe0433a37de8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});"
								],
								"type": "text/javascript",
								"id": "6d0a0f9d-5df0-4fc0-ab2b-193bdb9a9d4e"
							}
						}
					],
					"id": "8fdd70d9-2cbf-44c5-832e-0f8d7c06e4f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0358200b-3109-4811-a402-78d2f6bf5de4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c8d49155-33e6-43e3-88ae-939218eca162"
							}
						}
					],
					"id": "d083c1e4-b5ab-421d-a078-fa4dff361c29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyTimezoneCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ce190c64-e6d9-429f-ba90-5c2592cf7898"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5367c2c1-2d82-401f-b40d-7f6bb6184ae3"
							}
						}
					],
					"id": "81a4b5d4-fd01-4cfa-8a4a-e6d028dd60df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyVisaStatusCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "134d349e-474d-4304-a385-ba0c7c33abc4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ac7e8fcf-5128-47b9-9d0b-8938af1287e8"
							}
						}
					],
					"id": "080543e4-fedb-4727-b9ab-87ea3fd174e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidFirstnameCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"alphabets only\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ef010062-6567-473c-b057-9fe2b711b4b6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8df09b5f-dac5-4452-84a9-0a5fe5e26893"
							}
						}
					],
					"id": "05373bdb-9d73-4b50-a95b-089110ac5d9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{InvalidFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidLinkedInCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"www.linkedin.com\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a5fbf4ff-156b-4677-a9f7-cb21af77c5e2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "88b9ee44-ea7b-496f-9cc2-337083899a10"
							}
						}
					],
					"id": "c0ffbbc7-1183-4389-974b-cd4d13be226c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{InvaliduserLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidPhoneNumberCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"format (CountryCode)(PhoneNo)\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7803e952-ba36-4ce0-b1f3-55f84fa6f486"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm. collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "4e996bba-9894-4c18-991a-19260fbb4fc0"
							}
						}
					],
					"id": "93d72954-ff41-4170-9969-29c924ca327d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{InvalidPhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidMailCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript",
								"id": "9c81efaa-aa59-46fa-b8d8-2e0f28d5940a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"staff\" + pm.variables.replaceIn(\"{{$timestamp}}\");",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "018132f7-5a41-480f-a3ce-1ea6c24fedff"
							}
						}
					],
					"id": "fcf8f475-d606-42f8-89ae-e76120d337d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b11b06ac-d8d6-45ca-be83-f9e1eaaeca93"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c00a82ae-724a-4642-939e-24d694bc83cd"
							}
						}
					],
					"id": "3c19ec93-18ba-43a6-adbb-16066519c3d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{InvalidVisa}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "2be3b88e-b209-479f-acbd-a0b581a935c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "3c8a28fd-1705-4668-a9d2-6975cd0f2d96"
							}
						}
					],
					"id": "bfc3c55b-9d49-4a6b-b70d-ffcb37c1b3c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{invalidroleId}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "CreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"staff\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d903f1da-9722-467d-9adb-3a8ba48f1482"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffuserId = JSON.parse(responseBody); ",
									"pm.collectionVariables.set(\"staffuserId\",staffuserId.userId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "37114afe-cf35-4d9c-a704-7404a31f3fe9"
							}
						}
					],
					"id": "ca399357-e6b1-4cd7-933a-de346f29743f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidExistingPhoneCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5e4cbf47-063e-4506-8f52-f4d8cd0f9352"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"id": "cc725be1-bd1a-45e6-b137-da3e3170b05d"
							}
						}
					],
					"id": "47a22050-428e-4cdf-bff0-9e6b1cb4973d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidExistingMailCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "28cfafda-0773-438b-8e11-a370b3ad0178"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d8c64194-1569-4d89-a283-65cbea17bd64"
							}
						}
					],
					"id": "5762367d-f92d-4d7c-848e-90d6b3a5cdb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "NoAuthCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript",
								"id": "075f702a-0e56-4ca0-a0ef-971f87b36ddc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);"
								],
								"type": "text/javascript",
								"id": "e5bc0d3f-00df-4f36-816f-371125322157"
							}
						}
					],
					"id": "665a5ae3-b2ec-49dc-a183-5c90ad83628d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRequestBodyCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript",
								"id": "7d51721a-449c-4712-ac07-ed0957fa4f66"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a477b76a-1796-4df8-8f54-8d8fc6057dba"
							}
						}
					],
					"id": "f0074e08-a0ce-459d-bbfa-80a813271671",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFirstnameCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8465a9f9-d88e-4d4c-be11-946b61373bfd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "ea24872a-5c93-47fe-8e97-247ba47bd2da"
							}
						}
					],
					"id": "fed7e822-a08e-4799-95a9-841460780b2c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "375edde6-9dd4-41af-af18-533aef49adea"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "a2e7cc96-1705-47c7-981f-8b7e674ddb20"
							}
						}
					],
					"id": "e8fe0d44-fbc6-473b-a583-71c40e9c34d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "4071d952-7eef-4950-9282-05e847e56c21"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "5376913b-4374-470e-88aa-9d5bf57d0b7d"
							}
						}
					],
					"id": "fe365f0f-9f31-41bd-82ef-2e5985f692ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyEmailCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "89e2c371-91e8-4e5e-ab94-5b0caeaec439"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "d73f34fc-6c07-429d-80f7-92a6d29b3160"
							}
						}
					],
					"id": "4e67cdab-fdfa-44e7-a765-3eb2f2067e20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e79646d0-2ac1-4903-af02-e31e5ad65cf3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "2a3ead85-67f3-4826-92e1-0bc680fcc020"
							}
						}
					],
					"id": "295d9631-2f3e-4a22-84a5-54cced490bf3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyTimeZoneCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a5b97d7a-ed78-4b67-ac16-23b3ccd5f5e1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "bf1a7177-bf92-48cf-8b79-2e0b89fa5232"
							}
						}
					],
					"id": "b29a49c9-8eb6-4b9b-b7a4-7fa77974845c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyVisaStatusCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "21d94d09-7efe-4e6f-b650-7ba360bb64ae"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "50817666-4869-4c05-af86-61f75859347d"
							}
						}
					],
					"id": "bff606f3-e43c-4b27-8bcb-785a359299e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidFirstnameCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"alphabets only\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f5b68c71-f440-45e2-b672-4055163d6d1c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "dc2a5429-e7fc-4192-bc85-144e474f4598"
							}
						}
					],
					"id": "99cd34f1-a0c2-4d20-a400-9f28b9d9ac8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{InvalidFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidLinkedInCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"www.linkedin.com\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d81700ec-cbbe-4490-9b3d-84e9a6c877f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "42246cbd-06dd-4131-9af6-fbdeca631295"
							}
						}
					],
					"id": "1d5eb5c0-eaa0-4d1b-be04-9a326921972b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{InvaliduserLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidPhoneNumberCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"format (CountryCode)(PhoneNo)\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "55440170-5e77-4085-ae03-9fe29b9292e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "aaa1f8c4-8976-40fd-abcd-b3807049d110"
							}
						}
					],
					"id": "c964869f-2a10-4ec6-9ac7-4c5b38351bbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{InvalidPhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidMailCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript",
								"id": "8b9d3f16-56e9-4f89-a6b2-25bdeed4f56c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"student\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1);",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "4b81becb-dd7c-4328-9c20-5a3c56444769"
							}
						}
					],
					"id": "fedc1986-7ed0-4985-8623-72de9d81fa33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "e9d4f24f-2acc-4461-bfb5-4eb1dee76e5b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e35d10c3-2f01-4975-bcdd-6a867d7d199f"
							}
						}
					],
					"id": "d67cac6d-2cb0-4b47-8511-d226f69c5c51",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"{{PhoneNumber}}\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{InvalidVisa}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "608c2be7-1dcb-46f7-a242-8488373882d4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "3ccdc049-4bcb-49f4-bb27-abc7fc0aa605"
							}
						}
					],
					"id": "520e661a-0133-4f8e-ba6f-50001330529e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"{{PhoneNumber}}\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{invalidroleId}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "CreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffuserId = JSON.parse(responseBody); ",
									"pm.collectionVariables.set(\"studentuserId\",staffuserId.userId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "66eb4e2c-ab99-4ca2-b603-65ebddda77ff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"student\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript",
								"id": "c74b6d3d-e89a-4a3c-b6bd-b3804b8b7722"
							}
						}
					],
					"id": "f7da6911-5ff6-4fd6-9d22-47779f0ec3bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidExistingPhoneNumberCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ca44bfcc-4e75-4fbe-8b60-212df6a4c6ce"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "556610a4-e140-42d8-958a-4025d1b1b02b"
							}
						}
					],
					"id": "682d1fe6-d25e-46a8-9ea8-a72b1600062f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "InvalidExistingMailCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8b3dd830-9d93-48f0-af74-3881db9f52d3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a7b3dd08-8fe2-4ca9-94c7-f63275f7b664"
							}
						}
					],
					"id": "2514381e-b577-465a-b2ad-4c3b83db7419",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "03761b5f-a675-4e3a-98a9-e923b37e029e"
							}
						}
					],
					"id": "562a2233-0611-4579-8b42-198929181edc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "All Users with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f944defd-cb4c-48a6-b8e1-5716c63064c6"
							}
						}
					],
					"id": "6e190d79-8715-4951-9514-33a1359a85a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "All Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f15786ee-5a6c-4d10-823d-f7b574216e49"
							}
						}
					],
					"id": "cb26b2ef-5327-4561-88b1-403d24878f54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/roles"
					},
					"response": []
				},
				{
					"name": "All Roles With No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "040c8695-b927-4330-9d99-ee5c5e7fdd01"
							}
						}
					],
					"id": "a988d31c-03aa-418d-afd1-fda8d6f71678",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/roles"
					},
					"response": []
				},
				{
					"name": "User Information By User Id with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "cac1ab4c-b6f0-4ebe-90ad-aa6d3e60d251"
							}
						}
					],
					"id": "f00319c2-731f-4ad2-8b04-54348792bc49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "User Information By Invalid User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "576dc376-c553-4ef3-9825-06cc660d98ab"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1c964d25-e0c6-48d5-8cda-08cf3e47dce5"
							}
						}
					],
					"id": "74bf521c-56b1-4c31-9a0b-993fcfab5a60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "User Information By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "854d13c1-be05-4ad9-ae94-0ecd2a484811"
							}
						}
					],
					"id": "ad88eac7-813f-4420-a1bf-00d04f56be7c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "All Users With Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "93c9f478-43aa-4ed8-908f-1226d453bcd8"
							}
						}
					],
					"id": "33f6e77a-f520-464e-9d58-2c8c0dab7783",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/roles"
					},
					"response": []
				},
				{
					"name": "All Users With Roles With No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ebe163f5-3a3c-44a0-8b08-5acf9a44f391"
							}
						}
					],
					"id": "a848d864-7e14-4e41-bd33-f9ec325d812a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/roles"
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c68d912e-6926-4e45-a2b0-0f7497a94165"
							}
						}
					],
					"id": "7af3179c-741d-49ec-9082-ddb69969c1dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id={{byStatusId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "{{byStatusId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f9cc557a-a0bc-4be2-83f2-3986945a6600"
							}
						}
					],
					"id": "6a3807ce-3f8a-4baf-8ed9-7b20718cc857",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/byStatus"
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users For Admin Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d42e3557-9020-47b1-ba4d-a7bfe2ff6d59"
							}
						}
					],
					"id": "f9201993-6371-43ba-802f-638ba073e8b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=R01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users with Invalid Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c4cff229-7523-4beb-8176-1b9c06829abd"
							}
						}
					],
					"id": "57a3f7d6-e539-43a7-8aab-b44021d0a562",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users For Student Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "71e40c00-084a-4295-9feb-995e67758239"
							}
						}
					],
					"id": "36bf2b95-675d-4fa6-b6a0-94cee727d56f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=R03",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R03"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users For Staff Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f4ec2e3f-93f3-4a60-afe4-58a01c66a07c"
							}
						}
					],
					"id": "055ed428-0fd8-48bd-ac97-1c66ddee60d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=R03",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R03"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User By Program Batches With Invalid Program Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c4edbc03-557a-4bf1-a2c4-5bfd21f85fee"
							}
						}
					],
					"id": "98a78153-238b-47fe-a055-87eab9078d23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programBatch/844"
					},
					"response": []
				},
				{
					"name": "User By Program Batches With No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6c90c261-f8d3-46bc-9936-f58b17089ac0"
							}
						}
					],
					"id": "fa45eae0-d2ef-4dbc-9474-d713761fa0a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programBatch/8444"
					},
					"response": []
				},
				{
					"name": "User for Program With Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ef5c505a-daad-4f5b-abdb-4fa2360a3c6b"
							}
						}
					],
					"id": "841f6115-84b7-46f4-9521-fc4cf1ac877c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programs/1621"
					},
					"response": []
				},
				{
					"name": "User for Program with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e9dba22e-7322-4907-9765-edef7d6cce73"
							}
						}
					],
					"id": "7ba0abd5-c97d-4904-8f08-38f42d6aab37",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programs/16213"
					},
					"response": []
				},
				{
					"name": "NoAuthGetUsersbyRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "c3b38102-5204-4c91-80e1-528301478c38"
							}
						}
					],
					"id": "141f7464-3260-4cc2-a1d7-acae84f37d21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/roles/{{roleIdAdmin}}"
					},
					"response": []
				},
				{
					"name": "NoAuthGetActiveUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript",
								"id": "04b80b47-0a39-4b36-b4b6-5e0573f88795"
							}
						}
					],
					"id": "5eff6434-b503-4fe6-9490-6b48c15c3c65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "GetActiveUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "2729b390-fa30-4125-a788-8ac9bef659ee"
							}
						}
					],
					"id": "bd9affd2-3c75-4ced-8304-535797bacf41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "GetUsersbyRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "90a95189-6613-4f84-b8ad-1e9b0aca5d76"
							}
						}
					],
					"id": "f7c1cea9-71d3-4207-a87d-8e4cd3ac459b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/roles/{{roleIdAdmin}}"
					},
					"response": []
				},
				{
					"name": "InvalidGetUsersbyRoleIdNotPresent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 User Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"id": "d9a161a8-33de-4cfe-b453-e5c81d5b8f09"
							}
						}
					],
					"id": "87b9c8d6-3fae-4e64-9151-f4a4fe0ebdb3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/roles/{{invalidroleId}}"
					},
					"response": []
				},
				{
					"name": "NoAuthGetUsersbyRoleIdV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "ca0b251e-60eb-41cc-b821-910e9b18c5d3"
							}
						}
					],
					"id": "5af64313-5da4-4ab3-be33-98e7815eb5ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/v2/users/"
					},
					"response": []
				},
				{
					"name": "GetUsersbyRoleIdV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "5f91e8c9-2821-4d4e-8260-16a8005e6370"
							}
						}
					],
					"id": "94c9a560-d86f-4a5d-9fcc-b42c3bc5251b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/v2/users/"
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserAuth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript",
								"id": "7a420898-aeba-4e9d-b185-e66787313abb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "42b98466-6655-4636-8bec-6437b779eb33"
							}
						}
					],
					"id": "9872aa10-ffdf-4fa0-923e-02d3d33c9ac7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFistnameUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript",
								"id": "bb244b0b-6134-4c22-b070-888bfeba6854"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "89dbda05-9bfe-4049-83ac-fd097801602b"
							}
						}
					],
					"id": "7e8168f4-5ddb-4c87-a163-4e1ad7bc4aab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameFieldUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript",
								"id": "aefb6b90-7673-4f04-88b9-865e665bfd90"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "775346c8-ed8e-41c7-8f09-77030346f444"
							}
						}
					],
					"id": "bc129cd7-a896-4d03-83ea-2f8787a4366f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript",
								"id": "029628b4-768c-43cf-90e0-48f762ae08d0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "2ef0558a-1518-4716-9c00-92a290b2bb8a"
							}
						}
					],
					"id": "7ffce9c7-b50a-4399-977c-b3dd35a7c5d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript",
								"id": "a175069c-487d-4028-8c74-40ae8e2140e0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "1d885a90-82b2-4157-998e-118f895dac83"
							}
						}
					],
					"id": "b94fa4d9-13e2-4ffc-b66f-02a79fe59927",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{InvalidVisa}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidTimeZoneUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript",
								"id": "5f92764f-da09-4117-a49f-08dbfcf77455"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "d9ca5ef5-c580-464d-9a1f-52ff23bb12a5"
							}
						}
					],
					"id": "ba8830e1-12a3-4de2-9430-bac8431639aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{InvalidTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript",
								"id": "c4765de0-29dc-485a-8cac-8d369f079881"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "db5bde43-958c-4001-ba1d-55144e50220a"
							}
						}
					],
					"id": "58c67710-560f-4841-a671-c3a109df69ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserRoleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "53ba6c1b-6326-4cbc-8e80-1e4e4178c3c8"
							}
						}
					],
					"id": "2345c79e-2ead-49f1-96cd-9eb860547a50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\": \"{{userStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidUserIdUpdateUserRoleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "84ff69e2-c3c2-4dee-b518-993a6c56e5db"
							}
						}
					],
					"id": "2eac5e90-4140-49e8-bdc5-ff25209e2fc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\": \"{{userStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleStatusUpdateUserRoleStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "98a4d802-12e9-4f24-9d49-98a1e465d3c0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "36e7d7d2-a661-4bc3-bcdb-ad891881771a"
							}
						}
					],
					"id": "5b669fad-95b3-425c-8460-569761da6d93",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\":\"\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidRoleStatusUpdateUserRoleStatus Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "abd69a72-d629-453a-90c4-dccc6bc4da6a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "7b77f2f7-a4bc-4c39-aa52-4e8f588cfa97"
							}
						}
					],
					"id": "32aa7d22-d46c-4239-8a76-0f2e4e70d053",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\":\"{{InvalidTimeZone}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "UpdateUserRoleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "2f72e5c1-3edd-4d3e-8fdd-6a60db0e4cfd"
							}
						}
					],
					"id": "445a7465-970e-47ba-ad84-a5cbdb544711",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\": \"{{userStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleStatus/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "6a6ccaae-a5f5-4410-8e58-fd7b7a2aa33e"
							}
						}
					],
					"id": "bcdffe34-9b2d-440a-80a1-1888aec1b99f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdStudent}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleId/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidExistingRoleIdUpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "902cfa3d-f8f3-40fc-8ee7-153e074a09ab"
							}
						}
					],
					"id": "1be3d05f-b5c6-4c02-adba-fb6e315c33ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdAdmin}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleId/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidUserIdUpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"id": "d298848b-212c-4d13-aa46-841fa51baa60"
							}
						}
					],
					"id": "4abc613f-b15d-4d28-b4dc-fea01a2ef136",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdStudent}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleId/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "DeleteUserAssignProgramBatchUsingInvalidUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found Invalid UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1aa83d85-1932-4b3c-9d21-db83c2e6c714"
							}
						}
					],
					"id": "6ce66162-815f-433c-9d26-f581338062dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "GetUserAssignProgramBatchInvalidUserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found Invalid UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "80d78a6f-5749-42f9-af42-34e4a0ba9a6d"
							}
						}
					],
					"id": "08394dbf-e295-4914-b31f-25c08cf9e346",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "UpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ab60531f-116f-46fc-abe2-3870d09fec98"
							}
						}
					],
					"id": "c96783c8-bf6c-49e4-9372-5823cc6e903b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdStudent}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleId/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "NoAuthorisationAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "dea6ac90-fc7e-454d-b64b-ce76482902f1"
							}
						}
					],
					"id": "0f35bb25-944b-4da5-9ae9-4feb95b0589e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidUserIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6ba05b35-1a63-45ab-8c52-1fb968edda74"
							}
						}
					],
					"id": "a2f6f0e5-050c-479f-8abb-6e1cc81b4319",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStaff}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "DeleteUserAssignProgramBatchUsingUnAssignUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found UnAssign UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2792b797-8e52-4f2f-833c-4a7e8e03d722"
							}
						}
					],
					"id": "209bd8a8-7b7b-4fb9-b9f2-5c952abe42a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap/deleteAll/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "GetUnAssignUserIDFromProgramBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404:UserId Not Found\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "378f96c1-2473-4569-9ed0-50888d96392a"
							}
						}
					],
					"id": "d81bc86f-297e-47df-9c2f-db0251f49c3c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidAdminRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User with Role Admin cannot be assigned\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "c1ba533d-1c5f-40e1-8e76-51b459a7acc8"
							}
						}
					],
					"id": "79aa1c81-14a6-4bd8-af9f-b94b19405eb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "c23d23ca-feb0-41d2-b5f0-6229d5d121ff"
							}
						}
					],
					"id": "02e32b45-d5d6-4785-8acf-77ea60554173",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStaff}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyProgramIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "aea551d9-bd04-486f-937f-4a3dc4853281"
							}
						}
					],
					"id": "d6a2397b-3a72-4d51-b07c-b672514dd5ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": \"\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": 8448,\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "61dd5428-6ed0-43b8-8890-97c3b4c70a40"
							}
						}
					],
					"id": "204df4e4-61f5-4b47-89fa-43adc9fcf8e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyBatchIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "bb9c2202-c18e-4d06-bee1-d47ab0b5c80a"
							}
						}
					],
					"id": "763bb529-a270-4784-8cec-4d1e75a89f5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidEmptyBAtchStatusAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});"
								],
								"type": "text/javascript",
								"id": "70e62fc3-0741-4d6a-ad2c-7288922df1b7"
							}
						}
					],
					"id": "ee06a50d-a6df-4a06-b960-5efce3c7d720",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidProgramIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript",
								"id": "96d82080-69a6-4c00-b5b4-3c9a41011c57"
							}
						}
					],
					"id": "87f9fc85-fc8d-4075-b30c-7f652e275c5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{InvalidprogramId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript",
								"id": "eeeb2f36-ed57-4f53-8d42-3e34c64edcac"
							}
						}
					],
					"id": "0e0b7d9f-756b-44eb-8852-4ffa788a62d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{invalidroleId}}\",\n  \"userId\": \"{{roleIdStudent}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidBatchIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});"
								],
								"type": "text/javascript",
								"id": "da8baf04-492c-4f2c-a2df-77155eba4795"
							}
						}
					],
					"id": "e73987de-c537-4729-8612-553e0d7f2e4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{InvalidBatchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidBatchStatusAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Inactive\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "6f1e1348-7504-4915-84a2-29010a1c9a44"
							}
						}
					],
					"id": "5cf8a31a-a61a-4cc2-8e4b-ce663b441768",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{InvalidBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}"
					},
					"response": []
				},
				{
					"name": "InvalidInactivebatchAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript",
								"id": "3abc022d-bf62-4a10-915d-c2a96800aadf"
							}
						}
					],
					"id": "114d2984-31d6-4ab2-9ec6-2f267b2d9269",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{InactiveBatchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "unassignUserIdAssignprogram/batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found UnAssigned UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "00315efc-9674-459e-a5e6-1ad0b59cb6ed"
							}
						}
					],
					"id": "dfa5b176-c9c6-4833-9bfc-7d3eaab225aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MTAxOTAxOTAsImV4cCI6MTcxMDIxODk5MH0.L23bO4sGIltu8ijYA9fFihnTePnp6-B8ww3cf-JzCj_N1oANz1AjlHX4APNJ7pOySbKhaNuTWoipud2RRRVGdg"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "AssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "03ecf1a9-b7f3-45af-9bdc-264c3ca603fe"
							}
						}
					],
					"id": "2c7ef544-2dbb-4ba5-8273-e576b96f3e6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "User for Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9b13f5d6-97b4-4e49-833b-6b6b947d5c1e"
							}
						}
					],
					"id": "5ccc8568-bd45-41f6-9702-798702780e1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programs/{{programId}}"
					},
					"response": []
				},
				{
					"name": "User By Program Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c16a9a35-8078-4971-8f6f-17a62ba3e9cc"
							}
						}
					],
					"id": "92d6ee81-867d-4f7e-9247-7966eef05923",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programBatch/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "GetUserAssignprogramBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"    pm.test(\"Status code is 200 :Retrive Successfully\", function () {\r",
									"     pm.expect(pm.response.code).to.eql(200);\r",
									"    });"
								],
								"type": "text/javascript",
								"id": "72cce29d-4cc8-43da-9287-5abb9b3fdbb9"
							}
						}
					],
					"id": "d0560c3a-b0ec-49e1-983e-f8c499b30905",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript",
								"id": "6d7d25aa-76bc-450a-a9a9-1d7ab7f60eac"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "b90dbee0-8960-42af-887c-c8a6b23e45c4"
							}
						}
					],
					"id": "c87324e1-fdc9-478d-af0c-77f6994c9fbe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"{{status}}\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/userLogin/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvaliduserIdUpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript",
								"id": "cc46acb5-40ad-461c-ab34-020951c2b7a0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "48f689f4-c935-4929-b1f2-348ac82d5965"
							}
						}
					],
					"id": "f334f8fd-4bd5-48ae-8583-32bb0e302035",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"{{status}}\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/userLogin/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "UpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript",
								"id": "ab4b0af2-38e8-418f-96c3-3b28163b38db"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "99b28455-4f80-4a11-9cef-f27d3f247b14"
							}
						}
					],
					"id": "01a215ce-62c0-49b7-83a9-024cf5a25733",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"{{status}}\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/userLogin/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidStatusUpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript",
								"id": "c65d6e3b-3c45-4a8f-a8a9-a6c94047ea19"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "0b92176d-7dbc-4b5c-af18-ae2b29b50b77"
							}
						}
					],
					"id": "2c787003-2ddd-4b7d-87d5-6828a0ac7c08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/userLogin/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "GetUserRolePBAllUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"   \r",
									"i=pm.response.code;\r",
									"if(i==200){\r",
									"    pm.test(\"Status code is 200 :Retrive Successfully\", function () {\r",
									"     pm.expect(pm.response.code).to.eql(200);\r",
									"    });}\r",
									"if(i==400){\r",
									"    pm.test(\"Status code is 400 :Bad request \", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });}\r",
									"if(i==401){\r",
									"pm.test(\"Status code is 401 : Bad credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});}\r",
									"if(i==404){\r",
									"pm.test(\"Status code is 404:UserId Not Found\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "bc098dc2-e18f-4ab8-8c41-30f29c21a2a4"
							}
						}
					],
					"id": "8d2dddbd-9790-4379-8a98-612f7ff8aa23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "GetAllUserAssignProgramBatchNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8cbc1fa9-42cf-4601-af5f-b3d4b669f7fd"
							}
						}
					],
					"id": "fed66a6f-f7e4-4f3f-8ce9-d59ba7ad4bb6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "NoAuthDeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"id": "6f1ae604-2af6-4df0-9679-2d19ecedb6ef"
							}
						}
					],
					"id": "2ce68fb1-cd07-4172-a3f6-0ce12da644b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "InvalidUserIdDeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "741aca16-7382-4925-b0e7-442d573697f2"
							}
						}
					],
					"id": "f65d6da7-285d-4521-8dd2-ea30e14f6f9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/users/{{InvaliduserId}}"
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5bbad437-bed5-4a80-a3e9-bf7a2694a693"
							}
						}
					],
					"id": "48049014-e937-4480-8c70-2757c9774c0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "View User information after deleting the user Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6d35c16c-1e3b-48a7-800b-44ee14c6a52f"
							}
						}
					],
					"id": "4ba715f6-0c43-4cab-a303-ff9cba193615",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "DeleteUserRoleAllPBBasedonUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"i=pm.response.code;\r",
									"if(i==200){\r",
									"    pm.test(\"Status code is 200 :Deleted Successfully\", function () {\r",
									"     pm.expect(pm.response.code).to.eql(200);\r",
									"    });}\r",
									"if(i==400){\r",
									"    pm.test(\"Status code is 400 :Bad request \", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });}\r",
									"if(i==401){\r",
									"pm.test(\"Status code is 401 : Bad credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});}\r",
									"if(i==404){\r",
									"pm.test(\"Status code is 404: Not Found\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});}"
								],
								"type": "text/javascript",
								"id": "140b295e-dd52-4f16-af39-721405bb4b95"
							}
						}
					],
					"id": "29a62280-3317-402c-9514-8c49150fef3b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/userRoleProgramBatchMap/deleteAll/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "DeleteAssignUserProgramBatchNoauth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "007176a6-3dc2-44e5-9b89-3aea0420b141"
							}
						}
					],
					"id": "0e880314-6947-4885-8076-f40ca050dc5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap//{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "DeleteUserAssignprogramBatch using inactive/delete User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Bug : Status code is 404: Not Found InActive User/deleted again\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "07c1d772-71d7-4285-b731-f2d4f20826bf"
							}
						}
					],
					"id": "e3a8a949-e339-403a-8aa9-2bcafd772310",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap/deleteAll/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "User Information By User Id after all assigned program and batch is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "18be6c47-b1ea-4dac-9011-969f0cd96a8c"
							}
						}
					],
					"id": "78806460-2c48-4f92-8975-2d300dd2a4a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/{{adminuserId}}"
					},
					"response": []
				},
				{
					"name": "View Batch by valid BatchID after all after all assigned program and batch is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "02a10adf-8a51-44ad-ac09-262cff72fa55"
							}
						}
					],
					"id": "3071f9b8-5a43-4702-a2a2-441c8fa291f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/batches/batchId/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "View Program By ProgramID after all assigned program and batch is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "dd28f1a0-4215-4daa-9443-950b26db4a39"
							}
						}
					],
					"id": "6d0bf133-686e-4a34-b0de-55b698b1734a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/{{getProgramByProgramId}}/{{programId}}"
					},
					"response": []
				},
				{
					"name": "GetUserAssignProgramBatchNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "df9219f5-9522-4d27-ac91-44917aa29cc4"
							}
						}
					],
					"id": "39866692-3ebe-4d71-9542-43b7a1cd5d7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}"
					},
					"response": []
				}
			],
			"id": "6689b422-e4c4-468c-ac27-c93e097aaf66"
		},
		{
			"name": "UserSignOut",
			"item": [
				{
					"name": "User SignOut from LMS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3b1f72b2-6c3f-42af-bceb-af504a906716"
							}
						}
					],
					"id": "a602c63a-0903-4274-803e-ea31ea6e3e2c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/logoutlms"
					},
					"response": []
				},
				{
					"name": "No Auth UserLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Unauthorized\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d9796dd9-3669-4768-8177-c5f170cd2a2b"
							}
						}
					],
					"id": "82242ba4-a6bc-4482-9136-8596edcdc7b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "d20c98c7-81a9-4e39-a075-02c80df2cf4d"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{BearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "074a2164-327f-4ae3-8b67-66fed56ba3a0"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "a29f6d53-51f6-47dd-ad6d-8b2b3b341925"
			}
		}
	],
	"variable": [
		{
			"key": "BearerToken",
			"value": ""
		},
		{
			"key": "programName",
			"value": ""
		},
		{
			"key": "programDescription",
			"value": ""
		},
		{
			"key": "programStatus",
			"value": ""
		},
		{
			"key": "programId",
			"value": ""
		},
		{
			"key": "creationTime",
			"value": ""
		},
		{
			"key": "lastModTime",
			"value": ""
		},
		{
			"key": "InActiveProgramId",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		},
		{
			"key": "batchDescription",
			"value": ""
		},
		{
			"key": "batchNoOfClasses",
			"value": ""
		},
		{
			"key": "batchStatus",
			"value": ""
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "InactiveBatchId",
			"value": ""
		},
		{
			"key": "InActiveBatchName",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms"
		},
		{
			"key": "nonExistngBatchId",
			"value": "123456676",
			"type": "string"
		},
		{
			"key": "PhoneNumber",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "Invalidemail",
			"value": ""
		},
		{
			"key": "adminuserId",
			"value": ""
		},
		{
			"key": "existingphone",
			"value": ""
		},
		{
			"key": "userIdforInvalid",
			"value": ""
		},
		{
			"key": "staffuserId",
			"value": ""
		},
		{
			"key": "existingmail",
			"value": ""
		},
		{
			"key": "studentuserId",
			"value": ""
		},
		{
			"key": "visaStatus",
			"value": ""
		},
		{
			"key": "NonExistProgramName",
			"value": "NonExistProgramName 404StatusCode"
		}
	]
}
{
	"info": {
		"_postman_id": "2dc3cfef-f4e1-4fb6-90d9-0d07ef85c459",
		"name": "Team7_EndPoints_Explorers_API_POSTMAN_Hackathon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33001482",
		"_collection_link": "https://cloudy-desert-348375.postman.co/workspace/Team-Workspace~6cd3fe87-c52a-4afc-8b3a-f6578e75abee/collection/33412847-2dc3cfef-f4e1-4fb6-90d9-0d07ef85c459?action=share&source=collection_link&creator=33001482"
	},
	"item": [
		{
			"name": "UserLoginModule",
			"item": [
				{
					"name": "Invalid  Email Id Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Invalid Email Id\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{Invalidpassword}}\",\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Password Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Invalid Password\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmailId\": \"{{InvaliduserLoginEmailId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmail and InvalidPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Invalid Email Id and Invalid Password\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{Invalidpassword}}\",\r\n  \"userLoginEmailId\": \"{{InvaliduserLoginEmailId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank Email Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 400 :Bad request : Email is mandatory\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank password Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 400 :Bad request : password is mandatory\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmailId\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank Email and Blank  password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 400 :Bad request : Email and password are mandatory\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmailId\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User SignIn to LMS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Active\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody)\r",
									"pm.collectionVariables.set(\"BearerToken\", jsonData.token);\r",
									"\r",
									"//set Response Schema variable \r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": { \"type\": \"string\" },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"status\": { \"type\": \"string\" },\r",
									"    \"token\": { \"type\": \"string\" },\r",
									"    \"type\": { \"type\": \"string\" },\r",
									"    \"userId\": { \"type\": \"string\" }\r",
									"  },\r",
									"  \"required\": [\"email\", \"roles\", \"status\", \"token\", \"type\", \"userId\"]\r",
									"};\r",
									"     \r",
									"    \r",
									"  \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"password\": \"{{passwordExcel}}\",\r\n  \"userLoginEmailId\": \"{{userLoginEmailIdExcel}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ProgramModule",
			"item": [
				{
					"name": "Create New Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);",
									"",
									"",
									"var jsonResponse = pm.response.json();",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": { \"type\": \"integer\" },",
									"    \"programName\": { \"type\": \"string\" },",
									"    \"programDescription\": { \"type\": \"string\" },",
									"    \"programStatus\": { \"type\": \"string\" },",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }",
									"  },",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"};",
									"",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(100,175)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription_TestFile}}\",\n  \"programName\": \"{{createprogramName}}{{serialNumber}}\",\n  \"programStatus\": \"{{createprogramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Program for existing program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Program with Invalid Program Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not a Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"    });",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(0,5)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescriptionNegative}}\",\n  \"programName\": \"{{programName}}{{serialNumber}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Program with Invalid Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not a Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(0,5)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programNameNegative}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Proagram with Invalid Program Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not a Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(0,5)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}{{serialNumber}}\",\n  \"programStatus\": \"{{programStatusNegative}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/allPrograms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"allPrograms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program By ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/programs/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program By non-exsting ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/programs/{{NonExistProgramId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programs",
								"{{NonExistProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Program with Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/allProgramsWithUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"allProgramsWithUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									" //pm.environment.set(\"programId\", jsonData.programId);\r",
									" pm.collectionVariables.set(\"programName\",jsonData.programName);\r",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);\r",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);\r",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": { \"type\": \"integer\" },\r",
									"    \"programName\": { \"type\": \"string\" },\r",
									"    \"programDescription\": { \"type\": \"string\" },\r",
									"    \"programStatus\": { \"type\": \"string\" },\r",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const serialNumber = _.random(400,1000)\r",
									"// pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/putprogram/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By ID with Empty Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{IDEmptyprogramName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/putprogram/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By ID  for non-existing program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									" \r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/putprogram/{{NonExistProgramId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"putprogram",
								"{{NonExistProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By ID With Empty Program Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{IDprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{IDEmptyprogramStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/putprogram/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program description By Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									" \r",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);\r",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);\r",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);\r",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);\r",
									"\r",
									"//pm.test(\"verify program name \",function()\r",
									"//{\r",
									"// const response=pm.response.json();\r",
									"// pm.expect(response.json.programName).to.eql(pm.iterationData.get(\"programName\"));\r",
									"\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\": \"{{NameprogramDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/program/{{programName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"program",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By Name  for non-existing program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									" \r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{NameprogramDescription}}\",\r\n\"programName\": \"{{NonExistProgramName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/putprogram/{{NonExistProgramName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"putprogram",
								"{{NonExistProgramName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By Name with Empty Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\": \"{{programDescription}}\",\r\n\"programName\": \"{{IDEmptyprogramName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/program/{{programName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"program",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By Name With Empty Pogram Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"   \r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"programDescription\": \"{{programDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{IDEmptyprogramStatus}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/program/{{programName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"program",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program With Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"   \r",
									"\r",
									"});\r",
									"const response=pm.response.text();    \r",
									"pm.test(\"Program deleted successfully\",()=>{\r",
									"    pm.expect(response).to.eql(\"Message: Program Id-\"+pm.collectionVariables.get(\"programId\")+\" is deleted Successfully!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deletebyprogid/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deletebyprogid",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program With inactive Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"\r",
									"});\r",
									"const response=pm.response.text();    \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deletebyprogid/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deletebyprogid",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Second Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);",
									"pm.collectionVariables.set(\"InActiveProgramId\", jsonData.programId);",
									"",
									"var jsonResponse = pm.response.json();",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": { \"type\": \"integer\" },",
									"    \"programName\": { \"type\": \"string\" },",
									"    \"programDescription\": { \"type\": \"string\" },",
									"    \"programStatus\": { \"type\": \"string\" },",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }",
									"  },",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"};",
									"",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(150,200)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription_TestFile}}\",\n  \"programName\": \"{{createprogramName}}{{serialNumber}}\",\n  \"programStatus\": \"{{createprogramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program With  Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"\r",
									"});\r",
									"const response=pm.response.text();    \r",
									"pm.test(\"Program deleted successfully\",()=>{\r",
									"    pm.expect(response).to.eql(\"Message: Program Name -\"+pm.collectionVariables.get(\"programName\")+\" is deleted Successfully!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deletebyprogname/{{programName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deletebyprogname",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"programName\",jsonData.programName);",
									"pm.collectionVariables.set(\"programDescription\", jsonData.programDescription);",
									"pm.collectionVariables.set(\"programStatus\", jsonData.programStatus);",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);",
									"pm.collectionVariables.set(\"creationTime\", jsonData.creationTime);",
									"pm.collectionVariables.set(\"lastModTime\", jsonData.lastModTime);",
									"",
									"var jsonResponse = pm.response.json();",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": { \"type\": \"integer\" },",
									"    \"programName\": { \"type\": \"string\" },",
									"    \"programDescription\": { \"type\": \"string\" },",
									"    \"programStatus\": { \"type\": \"string\" },",
									"    \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"    \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }",
									"  },",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"};",
									"",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(100,175)",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription_TestFile}}\",\n  \"programName\": \"{{createprogramName}}{{serialNumber}}\",\n  \"programStatus\": \"{{createprogramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program By ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/programs/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ProgramBatchModule",
			"item": [
				{
					"name": "Create a new Batch for the Program",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(20,25)\r",
									"pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"      pm.response.to.have.status(201);\r",
									"});\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									" \r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									" pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									" pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									" pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									"pm.collectionVariables.set(\"InactiveBatchId\", jsonData.batchId);\r",
									"pm.collectionVariables.set(\"InActiveBatchName\", jsonData.batchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescriptionExcel}}\",\r\n  \"batchName\": \"{{batchNameExcel}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClassesExcel}},\r\n  \"batchStatus\": \"{{batchStatusExcel}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch with existing Program and  batchName-Invalid 400 status code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//const serialNumber = _.random(0,5)\r",
									"//pm.variables.set(\"serialNumber\", serialNumber )"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"   \r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"// pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"//  pm.collectionVariables.set(\"batchName\", jsonData.batchName);\r",
									"//  pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"//  pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"// pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"// pm.collectionVariables.set(\"batchId\", jsonData.batchId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing BatchName-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"    \r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing Batch Number Of Classes-invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{missingbatchNumber}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with  Batch Number Of Classes  as alphanumeric-invalid Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": \"10q\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing BatchStatus code-invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with missing ProgramId-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with invalid EndPoint-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batchesand",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batchesand"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch for the Program with Inactive ProgramID-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{InActiveProgramId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "View All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by valid BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchId/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by valid  BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchName/{{batchName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchName",
								"{{batchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by valid  ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/program/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"program",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by Inactive  Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/program/{{InActiveProgramId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"program",
								"{{InActiveProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by non-existing BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchId/{{nonExistngBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{nonExistngBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by non-existing BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchName/{{NonExistngBatchName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchName",
								"{{NonExistngBatchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by non-existing ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/program/{{NonExistProgramId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"program",
								"{{NonExistProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Batch with Batch descriptions by valid BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Batch with Batch Number Of classes  by valid BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Batch with Batch Name by valid Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdatebatchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Batch with Program name  by BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"//assumption :corresponding program name associated with the programId will be displayed, and will not take any other value.\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdateprogramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Batch with existing ProgramID by valid BATCH ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the batch by BatchId  with Inactive ProgramId-Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{InActiveProgramId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch Status with invalid status value by batchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{InvalidBatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch Status  by batchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdatebatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch status and program name with valid batchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchDescription\": { \"type\": \"string\" },\r",
									"            \"batchId\": { \"type\": \"number\" },\r",
									"            \"batchName\": { \"type\": \"string\" },\r",
									"            \"batchNoOfClasses\": { \"type\": \"number\" },\r",
									"            \"batchStatus\": { \"type\": \"string\" },\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									"pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									"pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"programName\", jsonData.programName);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{ActivebatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdateprogramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch with non-existing ProgramId -Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{NonExistProgramId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update BatchId of a batch with the  existing BatchId-Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch description by non existing batchId-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{nonExistngBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{nonExistngBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{nonExistngBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch number of classes  by non existing batchId-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{nonExistngBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{nonExistngBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{nonExistngBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  a Batch with valid BATCH ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Batch by non-existing BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/{{nonExistngBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{nonExistngBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Batch by inactive BatchID -invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/{{InactiveBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{InactiveBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by Inactive BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchId/{{InactiveBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{InactiveBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by Inactive BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchName/{{InActiveBatchName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchName",
								"{{InActiveBatchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch descriptions  by inactive batchId -invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{InactiveBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{InactiveBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{InactiveBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch number of classes  by inactive batchId-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{InactiveBatchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{InactiveBatchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{InactiveBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  a existing Batch to make  Batch status inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Batch 2 for the given Program",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = _.random(30,35)\r",
									"pm.variables.set(\"serialNumber\", serialNumber )\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"      pm.response.to.have.status(201);\r",
									"});\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"batchName\", jsonData.batchName)\r",
									" pm.collectionVariables.set(\"batchDescription\", jsonData.batchDescription);\r",
									" pm.collectionVariables.set(\"batchNoOfClasses\", jsonData.batchNoOfClasses);\r",
									" pm.collectionVariables.set(\"batchStatus\", jsonData.batchStatus);\r",
									"pm.collectionVariables.set(\"programId\", jsonData.programId);\r",
									"pm.collectionVariables.set(\"batchId\", jsonData.batchId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescriptionExcel}}\",\r\n  \"batchName\": \"{{batchNameExcel}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClassesExcel}},\r\n  \"batchStatus\": \"{{batchStatusExcel}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserModule",
			"item": [
				{
					"name": "NoAuthCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\n    \"userComments\": \"{{AdminComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{adminfirstname}}\",\n    \"userId\": \"\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userLogin\": {\n        \"loginStatus\": \"{{loginStatus}}\",\n        \"password\": \"{{password}}\",\n        \"roleIds\": [\n        \"Admin\"\n        ],\n        \"status\": \"{{status}}\",\n        \"userLoginEmail\": \"{{email}}\"\n    },\n    \"userMiddleName\": \"{{userMiddleName}}\",\n    \"userPhoneNumber\": {{PhoneNumber}},\n    \"userRoleMaps\": [\n        {\n        \"roleId\": \"{{roleIdAdmin}}\",\n        \"userRoleStatus\": \"{{userStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{timeZone}}\",\n    \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRequestBodyCreatingUserforAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFirstnameCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyMailCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyTimeZoneCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyVisaStatusCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidFirstnameCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"alphabets only\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{InvalidFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidLinkedInCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"www.linkedin.com\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{InvaliduserLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidPhoneNumberCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"format (CountryCode)(PhoneNo)\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{InvalidPhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidMailCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var Invalidemail = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\");",
									"pm.collectionVariables.set(\"Invalidemail\", Invalidemail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{Invalidemail}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{InvalidVisa}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{invalidroleId}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user=JSON.parse(responseBody)",
									"pm.collectionVariables.set(\"adminuserId\", user.userId);",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"pm.environment.unset(email)",
									" var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidExistingPhoneNumberCreatingUserForAdminRole Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}+1\")+\"@gmail.com\";",
									"//     pm.collectionVariables.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidExistingMailCreatingUserForAdminRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatingUserForAdminRoleForInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user=JSON.parse(responseBody)",
									"pm.collectionVariables.set(\"userIdforInvalid\", user.userId);",
									"",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);",
									"",
									" var email = \"admin1\" + pm.variables.replaceIn(\"{{$timestamp}}+1\")+\"@gmail.com\";",
									"    pm.collectionVariables.set(\"email\", email);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{adminfirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Admin\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\":\"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdAdmin}}\",\n      \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusAdmin}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRequestBodyCreatingUserforStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFirstnameCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyEmailCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyTimezoneCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyVisaStatusCreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidFirstnameCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"alphabets only\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{InvalidFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidLinkedInCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"www.linkedin.com\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{InvaliduserLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidPhoneNumberCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"format (CountryCode)(PhoneNo)\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm. collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{InvalidPhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidMailCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"staff\" + pm.variables.replaceIn(\"{{$timestamp}}\");",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{InvalidVisa}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{invalidroleId}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatingUserForStaffRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"staff\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffuserId = JSON.parse(responseBody); ",
									"pm.collectionVariables.set(\"staffuserId\",staffuserId.userId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidExistingPhoneCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidExistingMailCreatingUserForStaffRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{staffFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Staff\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStaff}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStaff}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRequestBodyCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFirstnameCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyEmailCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyTimeZoneCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyVisaStatusCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidFirstnameCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"alphabets only\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{InvalidFirstname}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidLinkedInCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"www.linkedin.com\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{InvaliduserLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidPhoneNumberCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"format (CountryCode)(PhoneNo)\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{InvalidPhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidMailCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"student\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1);",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"{{PhoneNumber}}\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{InvalidVisa}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": \"{{PhoneNumber}}\",\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{invalidroleId}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffuserId = JSON.parse(responseBody); ",
									"pm.collectionVariables.set(\"studentuserId\",staffuserId.userId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"student\" + pm.variables.replaceIn(\"{{$timestamp}}\"+1)+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\",email);",
									"",
									"pm.collectionVariables.set(\"existingmail\",email);",
									"pm.collectionVariables.set(\"existingphone\",PhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidExistingPhoneNumberCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidExistingMailCreatingUserForStudentRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{StaffComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{firstnameStudent}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{loginStatus}}\",\n    \"password\": \"{{password}}\",\n    \"roleIds\": [\n      \"Student\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{email}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleIdStudent}}\",\n         \"userRoleStatus\": \"{{userStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{timeZone}}\",\n  \"userVisaStatus\": \"{{visaStatusStudent}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Roles With No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Information By User Id with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Information By Invalid User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Information By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users With Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users With Roles With No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id={{byStatusId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "{{byStatusId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users For Admin Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=R01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users with Invalid Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users For Student Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=R03",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R03"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "By Status Count Of Active and Inactive Users For Staff Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id=R03",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R03"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User By Program Batches With Invalid Program Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programBatch/844",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programBatch",
								"844"
							]
						}
					},
					"response": []
				},
				{
					"name": "User By Program Batches With No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programBatch/8444",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programBatch",
								"8444"
							]
						}
					},
					"response": []
				},
				{
					"name": "User for Program With Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programs/1621",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programs",
								"1621"
							]
						}
					},
					"response": []
				},
				{
					"name": "User for Program with No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programs/16213",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programs",
								"16213"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthGetUsersbyRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/roles/{{roleIdAdmin}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roles",
								"{{roleIdAdmin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthGetActiveUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/activeUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"activeUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetActiveUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/activeUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"activeUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUsersbyRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/roles/{{roleIdAdmin}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roles",
								"{{roleIdAdmin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidGetUsersbyRoleIdNotPresent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 User Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/roles/{{invalidroleId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roles",
								"{{invalidroleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthGetUsersbyRoleIdV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v2/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUsersbyRoleIdV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v2/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserAuth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyFistnameUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyLastnameFieldUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyPhoneNumberUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": \"\",\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidVisaStatusUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{InvalidVisa}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidTimeZoneUpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{InvalidTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var PhoneNumber= _.random(2010101010,2313131313);",
									"pm.collectionVariables.set(\"PhoneNumber\", PhoneNumber );",
									"",
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.collectionVariables.set(\"email\", email);",
									"",
									"var visaStatus=\"H4-EAD\";",
									"pm.collectionVariables.set(\"visaStatus\", visaStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"{{AdminComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{updateFirstname}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{Updatelinkenin}}\",\n  \"userLocation\": \"{{UpdateLocation}}\",\n  \"userLoginEmail\": \"{{email}}\",\n  \"userMiddleName\": \"{{UpdateuserMiddleName}}\",\n  \"userPhoneNumber\": {{PhoneNumber}},\n  \"userTimeZone\": \"{{updateTimeZone}}\",\n  \"userVisaStatus\":\"{{visaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserRoleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\": \"{{userStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidUserIdUpdateUserRoleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\": \"{{userStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleStatusUpdateUserRoleStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\":\"\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidRoleStatusUpdateUserRoleStatus Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\":\"{{InvalidTimeZone}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserRoleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userRoleStatus\": \"{{userStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdStudent}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleId/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidExistingRoleIdUpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdAdmin}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleId/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidUserIdUpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdStudent}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleId/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserAssignProgramBatchUsingInvalidUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found Invalid UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserAssignProgramBatchInvalidUserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found Invalid UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userRoleList\": [\n    \"{{roleIdStudent}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleId/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthorisationAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidUserIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStaff}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserAssignProgramBatchUsingUnAssignUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found UnAssign UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/deleteAll/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUnAssignUserIDFromProgramBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404:UserId Not Found\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidAdminRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User with Role Admin cannot be assigned\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdAdmin}}\",\n  \"userId\": \"{{adminuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStaff}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyProgramIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": \"\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": 8448,\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyBatchIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"mandatory\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidEmptyBAtchStatusAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Mandatory\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidProgramIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{InvalidprogramId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidRoleIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{invalidroleId}}\",\n  \"userId\": \"{{roleIdStudent}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidBatchIdAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{InvalidBatchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidBatchStatusAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Inactive\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{InvalidBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userIdforInvalid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userIdforInvalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidInactivebatchAssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{InactiveBatchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unassignUserIdAssignprogram/batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found UnAssigned UserId\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MTAxOTAxOTAsImV4cCI6MTcxMDIxODk5MH0.L23bO4sGIltu8ijYA9fFihnTePnp6-B8ww3cf-JzCj_N1oANz1AjlHX4APNJ7pOySbKhaNuTWoipud2RRRVGdg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AssignUpdateUserRoleProgramBatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\":\"{{programId}}\",\n  \"roleId\": \"{{roleIdStudent}}\",\n  \"userId\": \"{{staffuserId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\":\"{{batchId}}\",\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User for Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programs/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User By Program Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programBatch/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programBatch",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserAssignprogramBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"    pm.test(\"Status code is 200 :Retrive Successfully\", function () {\r",
									"     pm.expect(pm.response.code).to.eql(200);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthUpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"{{status}}\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/userLogin/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvaliduserIdUpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"{{status}}\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/userLogin/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Schema is valid\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"userComments\": { \"type\": \"string\" },",
									"            \"userEduPg\": { \"type\": \"string\" },",
									"            \"userEduUg\": { \"type\": \"string\" },",
									"            \"userFirstName\": { \"type\": \"string\" },",
									"            \"userId\": { \"type\": \"string\" },",
									"            \"userLastName\": { \"type\": \"string\" },",
									"            \"userLinkedinUrl\": { \"type\": \"string\" },",
									"            \"userLocation\": { \"type\": \"string\" },",
									"            \"userMiddleName\": { \"type\": \"string\" },",
									"            \"userPhoneNumber\": { \"type\": [\"number\", \"null\"] }, // Allow number or null",
									"            \"userTimeZone\": { \"type\": \"string\" },",
									"            \"userVisaStatus\": { \"type\": [\"string\", \"null\"] } // Allow string or null",
									"        },",
									"        \"required\": [\"userComments\", \"userEduPg\", \"userEduUg\", ",
									"                     \"userFirstName\", \t\"userId\", \t\"userLastName\", ",
									"                    \t\"userLinkedinUrl\", \t\"userLocation\", \t\"userMiddleName\",",
									"                    \t\"userPhoneNumber\", \t\"userTimeZone\", \t\"userVisaStatus\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"{{status}}\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/userLogin/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidStatusUpdateUserLoginStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email = \"admin\" + pm.variables.replaceIn(\"{{$timestamp}}\")+\"@gmail.com\";",
									"pm.environment.set(\"email\",email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400-BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginStatus\": \"{{status}}\",\n  \"password\": \"\",\n  \"roleIds\": [\n     \"{{roleIdAdmin}}\"\n  ],\n  \"status\": \"\",\n  \"userLoginEmail\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/userLogin/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserRolePBAllUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"   \r",
									"i=pm.response.code;\r",
									"if(i==200){\r",
									"    pm.test(\"Status code is 200 :Retrive Successfully\", function () {\r",
									"     pm.expect(pm.response.code).to.eql(200);\r",
									"    });}\r",
									"if(i==400){\r",
									"    pm.test(\"Status code is 400 :Bad request \", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });}\r",
									"if(i==401){\r",
									"pm.test(\"Status code is 401 : Bad credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});}\r",
									"if(i==404){\r",
									"pm.test(\"Status code is 404:UserId Not Found\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllUserAssignProgramBatchNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							]
						}
					},
					"response": []
				},
				{
					"name": "NoAuthDeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidUserIdDeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404-NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(responseJson);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{InvaliduserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{InvaliduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View User information after deleting the user Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserRoleAllPBBasedonUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"i=pm.response.code;\r",
									"if(i==200){\r",
									"    pm.test(\"Status code is 200 :Deleted Successfully\", function () {\r",
									"     pm.expect(pm.response.code).to.eql(200);\r",
									"    });}\r",
									"if(i==400){\r",
									"    pm.test(\"Status code is 400 :Bad request \", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    });}\r",
									"if(i==401){\r",
									"pm.test(\"Status code is 401 : Bad credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});}\r",
									"if(i==404){\r",
									"pm.test(\"Status code is 404: Not Found\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/deleteAll/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAssignUserProgramBatchNoauth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap//{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserAssignprogramBatch using inactive/delete User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Bug : Status code is 404: Not Found InActive User/deleted again\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/deleteAll/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Information By User Id after all assigned program and batch is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Batch by valid BatchID after all after all assigned program and batch is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchId/{{batchId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Program By ProgramID after all assigned program and batch is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{getProgramByProgramId}}/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{getProgramByProgramId}}",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserAssignProgramBatchNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UnAuthorized 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/{{adminuserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{adminuserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserSignOut",
			"item": [
				{
					"name": "User SignOut from LMS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logoutlms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logoutlms"
							]
						}
					},
					"response": []
				},
				{
					"name": "No Auth UserLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 : Unauthorized\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logoutlms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logoutlms"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{BearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BearerToken",
			"value": ""
		},
		{
			"key": "programName",
			"value": ""
		},
		{
			"key": "programDescription",
			"value": ""
		},
		{
			"key": "programStatus",
			"value": ""
		},
		{
			"key": "programId",
			"value": ""
		},
		{
			"key": "creationTime",
			"value": ""
		},
		{
			"key": "lastModTime",
			"value": ""
		},
		{
			"key": "InActiveProgramId",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		},
		{
			"key": "batchDescription",
			"value": ""
		},
		{
			"key": "batchNoOfClasses",
			"value": ""
		},
		{
			"key": "batchStatus",
			"value": ""
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "InactiveBatchId",
			"value": ""
		},
		{
			"key": "InActiveBatchName",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms"
		},
		{
			"key": "nonExistngBatchId",
			"value": "123456676",
			"type": "string"
		},
		{
			"key": "PhoneNumber",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "Invalidemail",
			"value": ""
		},
		{
			"key": "adminuserId",
			"value": ""
		},
		{
			"key": "existingphone",
			"value": ""
		},
		{
			"key": "userIdforInvalid",
			"value": ""
		},
		{
			"key": "staffuserId",
			"value": ""
		},
		{
			"key": "existingmail",
			"value": ""
		},
		{
			"key": "studentuserId",
			"value": ""
		},
		{
			"key": "visaStatus",
			"value": ""
		},
		{
			"key": "NonExistProgramName",
			"value": "NonExistProgramName 404StatusCode"
		}
	]
}